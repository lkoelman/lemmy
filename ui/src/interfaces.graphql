# Implementation of interfaces.ts in graphql
enum UserOperation {
  Login,
  Register,
  CreateCommunity,
  CreatePost,
  ListCommunities,
  ListCategories,
  GetPost,
  GetCommunity,
  CreateComment,
  EditComment,
  SaveComment,
  CreateCommentLike,
  GetPosts,
  CreatePostLike,
  CreatePostTagged,
  EditPost,
  SavePost,
  EditCommunity,
  FollowCommunity,
  GetFollowedCommunities,
  GetUserDetails,
  GetReplies,
  GetUserMentions,
  EditUserMention,
  GetModlog,
  BanFromCommunity,
  AddModToCommunity,
  CreateSite,
  EditSite,
  GetSite,
  AddAdmin,
  BanUser,
  Search,
  MarkAllAsRead,
  SaveUserSettings,
  TransferCommunity,
  TransferSite,
  DeleteAccount,
  PasswordReset,
  PasswordChange,
  CreatePrivateMessage,
  EditPrivateMessage,
  GetPrivateMessages,
  UserJoin,
  GetComments,
  GetSiteConfig,
  SaveSiteConfig,
}

enum CommentSortType {
  Hot,
  Top,
  New,
  Old,
}

enum ListingType {
  All,
  Subscribed,
  Community,
}

enum DataType {
  Post,
  Comment,
}

enum SortType {
  Hot,
  New,
  TopDay,
  TopWeek,
  TopMonth,
  TopYear,
  TopAll,
}

enum SearchType {
  All,
  Comments,
  Posts,
  Communities,
  Users,
  Url,
}

type User {
  id: Int!
  iss: String!
  username: String!
  show_nsfw: Boolean!
  theme: String!
  default_sort_type: SortType!
  default_listing_type: ListingType!
  lang: String!
  avatar: String
  show_avatars: Boolean!
  unreadCount: Int
}

type UserView {
  id: Int!
  name: String!
  avatar: String
  email: String
  matrix_user_id: String
  published: String!
  number_of_posts: Int!
  post_score: Int!
  number_of_comments: Int!
  comment_score: Int!
  banned: Boolean!
  show_avatars: Boolean!
  send_notifications_to_email: Boolean!
}

type CommunityUser {
  id: Int!
  user_id: Int!
  user_name: String!
  avatar: String
  community_id: Int!
  community_name: String!
  published: String!
}

type Community {
  id: Int!
  name: String!
  title: String!
  description: String
  category_id: Int!
  creator_id: Int!
  removed: Boolean!
  deleted: Boolean!
  nsfw: Boolean!
  published: String!
  updated: String
  creator_name: String!
  creator_avatar: String
  category_name: String!
  number_of_subscribers: Int!
  number_of_posts: Int!
  number_of_comments: Int!
  user_id: Int
  subscribed: Boolean
}

type Post {
  id: Int!
  name: String!
  url: String
  body: String
  creator_id: Int!
  community_id: Int!
  removed: Boolean!
  deleted: Boolean!
  locked: Boolean!
  stickied: Boolean!
  embed_title: String
  embed_description: String
  embed_html: String
  thumbnail_url: String
  nsfw: Boolean!
  banned: Boolean!
  banned_from_community: Boolean!
  published: String!
  updated: String
  creator_name: String!
  creator_avatar: String
  community_name: String!
  community_removed: Boolean!
  community_deleted: Boolean!
  community_nsfw: Boolean!
  number_of_comments: Int!
  score: Int!
  upvotes: Int!
  downvotes: Int!
  hot_rank: Int!
  newest_activity_time: String!
  user_id: Int
  my_vote: Int
  my_tags: [String]
  subscribed: Boolean
  read: Boolean
  saved: Boolean
  duplicates: [Post]
}

type Comment {
  id: Int!
  creator_id: Int!
  post_id: Int!
  parent_id: Int
  content: String!
  removed: Boolean!
  deleted: Boolean!
  read: Boolean!
  published: String!
  updated: String
  community_id: Int!
  community_name: String!
  banned: Boolean!
  banned_from_community: Boolean!
  creator_name: String!
  creator_avatar: String
  score: Int!
  upvotes: Int!
  downvotes: Int!
  hot_rank: Int!
  user_id: Int
  my_vote: Int
  subscribed: Int
  saved: Boolean
  user_mention_id: number # For mention type
  recipient_id: Int
  depth: Int
}

type Category {
  id: Int!
  name: String!
}

type Site {
  id: Int!
  name: String!
  description: String
  creator_id: Int!
  published: String!
  updated: String
  creator_name: String!
  number_of_users: Int!
  number_of_posts: Int!
  number_of_comments: Int!
  number_of_communities: Int!
  enable_downvotes: Boolean!
  open_registration: Boolean!
  enable_nsfw: Boolean!
}

type PrivateMessage {
  id: Int!
  creator_id: Int!
  recipient_id: Int!
  content: String!
  deleted: Boolean!
  read: Boolean!
  published: String!
  updated: String
  creator_name: String!
  creator_avatar: String
  recipient_name: String!
  recipient_avatar: String
}

enum BanType {
  Community,
  Site,
}

type FollowCommunityForm {
  community_id: Int!
  follow: Boolean!
  auth: String
}

type GetFollowedCommunitiesForm {
  auth: String!
}

type GetFollowedCommunitiesResponse {
  communities: [CommunityUser]!
}

type GetUserDetailsForm {
  user_id: Int
  username: String
  sort: String!
  page: Int
  limit: Int
  community_id: Int
  saved_only: Boolean!
}

type UserDetailsResponse {
  user: UserView!
  follows: [CommunityUser]!
  moderates: [CommunityUser]!
  comments: [Comment]!
  posts: [Post]!
  admins: [UserView]!
}

type GetRepliesForm {
  sort: String!
  page: Int
  limit: Int
  unread_only: Boolean!
  auth: String
}

type GetRepliesResponse {
  replies: [Comment]!
}

type GetUserMentionsForm {
  sort: String!
  page: Int
  limit: Int
  unread_only: Boolean!
  auth: String
}

type GetUserMentionsResponse {
  mentions: [Comment]!
}

type EditUserMentionForm {
  user_mention_id: Int!
  read: Boolean
  auth: String
}

type UserMentionResponse {
  mention: Comment!
}

type BanFromCommunityForm {
  community_id: Int!
  user_id: Int!
  ban: Boolean!
  reason: String
  expires: Int
  auth: String
}

type BanFromCommunityResponse {
  user: UserView!
  banned: Boolean!
}

type AddModToCommunityForm {
  community_id: Int!
  user_id: Int!
  added: Boolean!
  auth: String
}

type TransferCommunityForm {
  community_id: Int!
  user_id: Int!
  auth: String
}

type TransferSiteForm {
  user_id: Int!
  auth: String
}

type AddModToCommunityResponse {
  moderators: [CommunityUser]!
}

type GetModlogForm {
  mod_user_id: Int
  community_id: Int
  page: Int
  limit: Int
}

type GetModlogResponse {
  removed_posts: [ModRemovePost]!
  locked_posts: [ModLockPost]!
  stickied_posts: [ModStickyPost]!
  removed_comments: [ModRemoveComment]!
  removed_communities: [ModRemoveCommunity]!
  banned_from_community: [ModBanFromCommunity]!
  banned: [ModBan]!
  added_to_community: [ModAddCommunity]!
  added: [ModAdd]!
}

type ModRemovePost {
  id: Int!
  mod_user_id: Int!
  post_id: Int!
  reason: String
  removed: Boolean
  when_: String
  mod_user_name: String!
  post_name: String!
  community_id: Int!
  community_name: String!
}

type ModLockPost {
  id: Int!
  mod_user_id: Int!
  post_id: Int!
  locked: Boolean
  when_: String
  mod_user_name: String!
  post_name: String!
  community_id: Int!
  community_name: String!
}

type ModStickyPost {
  id: Int!
  mod_user_id: Int!
  post_id: Int!
  stickied: Boolean
  when_: String
  mod_user_name: String!
  post_name: String!
  community_id: Int!
  community_name: String!
}

type ModRemoveComment {
  id: Int!
  mod_user_id: Int!
  comment_id: Int!
  reason: String
  removed: Boolean
  when_: String
  mod_user_name: String!
  comment_user_id: Int!
  comment_user_name: String!
  comment_content: String!
  post_id: Int!
  post_name: String!
  community_id: Int!
  community_name: String!
}

type ModRemoveCommunity {
  id: Int!
  mod_user_id: Int!
  community_id: Int!
  reason: String
  removed: Boolean
  expires: Int
  when_: String
  mod_user_name: String!
  community_name: String!
}

type ModBanFromCommunity {
  id: Int!
  mod_user_id: Int!
  other_user_id: Int!
  community_id: Int!
  reason: String
  banned: Boolean
  expires: Int
  when_: String
  mod_user_name: String!
  other_user_name: String!
  community_name: String!
}

type ModBan {
  id: Int!
  mod_user_id: Int!
  other_user_id: Int!
  reason: String
  banned: Boolean
  expires: Int
  when_: String
  mod_user_name: String!
  other_user_name: String!
}

type ModAddCommunity {
  id: Int!
  mod_user_id: Int!
  other_user_id: Int!
  community_id: Int!
  removed: Boolean
  when_: String
  mod_user_name: String!
  other_user_name: String!
  community_name: String!
}

type ModAdd {
  id: Int!
  mod_user_id: Int!
  other_user_id: Int!
  removed: Boolean
  when_: String
  mod_user_name: String!
  other_user_name: String!
}

type LoginForm {
  username_or_email: String!
  password: String!
}

type RegisterForm {
  username: String!
  email: String
  password: String!
  password_verify: String!
  admin: Boolean!
  show_nsfw: Boolean!
}

type LoginResponse {
  jwt: String!
}

type UserSettingsForm {
  show_nsfw: Boolean!
  theme: String!
  default_sort_type: SortType!
  default_listing_type: ListingType!
  lang: String!
  avatar: String
  email: String
  matrix_user_id: String
  new_password: String
  new_password_verify: String
  old_password: String
  show_avatars: Boolean!
  send_notifications_to_email: Boolean!
  auth: String!
}

type CommunityForm {
  name: String!
  title: String!
  description: String
  category_id: Int!
  edit_id: Int
  removed: Boolean
  deleted: Boolean
  nsfw: Boolean!
  reason: String
  expires: Int
  auth: String
}

type GetCommunityForm {
  id: Int
  name: String
  auth: String
}

type GetCommunityResponse {
  community: Community!
  moderators: [CommunityUser]!
  admins: [UserView]!
  online: Int!
}

type CommunityResponse {
  community: Community!
}

type ListCommunitiesForm {
  sort: String!
  page: Int
  limit: Int
  auth: String
}

type ListCommunitiesResponse {
  communities: [Community]!
}

type ListCategoriesResponse {
  categories: [Category]!
}

type PostForm {
  name: String!
  url: String
  body: String
  community_id: Int!
  updated: Int
  edit_id: Int
  creator_id: Int!
  removed: Boolean
  deleted: Boolean
  nsfw: Boolean!
  locked: Boolean
  stickied: Boolean
  reason: String
  auth: String!
}

type PostFormParams {
  name: String!
  url: String
  body: String
  community: String
}

type GetPostForm {
  id: Int!
  auth: String
}

type GetPostResponse {
  post: Post!
  comments: [Comment]!
  community: Community!
  moderators: [CommunityUser]!
  admins: [UserView]!
  online: Int!
}

type SavePostForm {
  post_id: Int!
  save: Boolean!
  auth: String
}

type PostResponse {
  post: Post!
}

type CommentForm {
  content: String!
  post_id: Int!
  parent_id: Int
  edit_id: Int
  creator_id: Int!
  removed: Boolean
  deleted: Boolean
  reason: String
  read: Boolean
  auth: String!
}

type SaveCommentForm {
  comment_id: Int!
  save: Boolean!
  auth: String
}

type CommentResponse {
  comment: Comment!
  recipient_ids: [number]!
}

type CommentLikeForm {
  comment_id: Int!
  post_id: Int!
  score: Int!
  auth: String
}

type CommentNode {
  comment: Comment!
  children: [CommentNode]
}

type GetPostsForm {
  type_: String
  sort: String!
  page: Int
  limit: Int
  community_id: Int
  auth: String
}

type GetPostsResponse {
  posts: [Post]!
}

type GetCommentsForm {
  type_: String
  sort: String!
  page: Int
  limit: Int!
  community_id: Int
  auth: String
}

type GetCommentsResponse {
  comments: [Comment]!
}

type CreatePostLikeForm {
  post_id: Int!
  score: Int!
  auth: String
}

type CreatePostTaggedForm {
  post_id: Int!
  tags: [String]!
  auth: String
}

type SiteForm {
  name: String!
  description: String
  enable_downvotes: Boolean!
  open_registration: Boolean!
  enable_nsfw: Boolean!
  auth: String
}

type GetSiteConfig {
  auth: String
}

type GetSiteConfigResponse {
  config_hjson: String!
}

type SiteConfigForm {
  config_hjson: String!
  auth: String
}

type GetSiteResponse {
  site: Site!
  admins: [UserView]!
  banned: [UserView]!
  online: Int!
}

type SiteResponse {
  site: Site!
}

type BanUserForm {
  user_id: Int!
  ban: Boolean!
  reason: String
  expires: Int
  auth: String
}

type BanUserResponse {
  user: UserView!
  banned: Boolean!
}

type AddAdminForm {
  user_id: Int!
  added: Boolean!
  auth: String
}

type AddAdminResponse {
  admins: [UserView]!
}

type SearchForm {
  q: String!
  type_: String
  community_id: Int
  sort: String!
  page: Int
  limit: Int
  auth: String
}

type SearchResponse {
  type_: String
  posts: [Post]
  comments: [Comment]
  communities: [Community]!
  users: [UserView]!
}

type DeleteAccountForm {
  password: String!
}

type PasswordResetForm {
  email: String!
}

type PasswordChangeForm {
  token: String!
  password: String!
  password_verify: String!
}

type PrivateMessageForm {
  content: String!
  recipient_id: Int!
  auth: String
}

type PrivateMessageFormParams {
  recipient_id: Int!
}

type EditPrivateMessageForm {
  edit_id: Int!
  content: String
  deleted: Boolean
  read: Boolean
  auth: String
}

type GetPrivateMessagesForm {
  unread_only: Boolean!
  page: Int
  limit: Int
  auth: String
}

type PrivateMessagesResponse {
  messages: [PrivateMessage]!
}

type PrivateMessageResponse {
  message: PrivateMessage!
}

type UserJoinForm {
  auth: String!
}

type UserJoinResponse {
  user_id: Int!
}

union MessageType =
  | EditPrivateMessageForm
  | LoginForm
  | RegisterForm
  | CommunityForm
  | FollowCommunityForm
  | ListCommunitiesForm
  | GetFollowedCommunitiesForm
  | PostForm
  | GetPostForm
  | GetPostsForm
  | GetCommunityForm
  | CommentForm
  | CommentLikeForm
  | SaveCommentForm
  | CreatePostLikeForm
  | CreatePostTaggedForm
  | BanFromCommunityForm
  | AddAdminForm
  | AddModToCommunityForm
  | TransferCommunityForm
  | TransferSiteForm
  | SaveCommentForm
  | BanUserForm
  | AddAdminForm
  | GetUserDetailsForm
  | GetRepliesForm
  | GetUserMentionsForm
  | EditUserMentionForm
  | GetModlogForm
  | SiteForm
  | SearchForm
  | UserSettingsForm
  | DeleteAccountForm
  | PasswordResetForm
  | PasswordChangeForm
  | PrivateMessageForm
  | EditPrivateMessageForm
  | GetPrivateMessagesForm
  | SiteConfigForm

union ResponseType =
  | SiteResponse
  | GetFollowedCommunitiesResponse
  | ListCommunitiesResponse
  | GetPostsResponse
  | PostResponse
  | GetRepliesResponse
  | GetUserMentionsResponse
  | ListCategoriesResponse
  | CommunityResponse
  | CommentResponse
  | UserMentionResponse
  | LoginResponse
  | GetModlogResponse
  | SearchResponse
  | BanFromCommunityResponse
  | AddModToCommunityResponse
  | BanUserResponse
  | AddAdminResponse
  | PrivateMessageResponse
  | PrivateMessagesResponse
  | GetSiteConfigResponse

type WebSocketResponse {
  op: UserOperation!
  data: ResponseType!
}

type WebSocketJsonResponse {
  op: String
  data: ResponseType
  error: String
  reconnect: Boolean
}
